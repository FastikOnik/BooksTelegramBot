# handlers/add.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, state
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State

from loader import dp
from database import Database

class AddBookState(StatesGroup):
    TITLE = State()
    AUTHOR = State()
    DESCRIPTION = State()
    GENRE = State()

@dp.message_handler(Command("add"))
async def add_book_start(message: types.Message):
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
    await message.answer("<b>üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</b>", parse_mode="HTML")
    await AddBookState.TITLE.set()

@dp.message_handler(state=AddBookState.TITLE)
async def add_book_title(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    title = message.text
    await state.update_data(title=title)

    await message.answer("<b>üìù –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:</b>", parse_mode="HTML")
    await AddBookState.AUTHOR.set()

@dp.message_handler(state=AddBookState.AUTHOR)
async def add_book_author(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    author = message.text
    await state.update_data(author=author)

    await message.answer("<b>‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</b>", parse_mode="HTML")
    await AddBookState.DESCRIPTION.set()

@dp.message_handler(state=AddBookState.DESCRIPTION)
async def add_book_description(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    description = message.text
    await state.update_data(description=description)

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    genres = Database('library.db').get_all_genres()
    
    genres_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for genre in genres:
        genres_markup.add(KeyboardButton(genre))

    await message.answer("<b>‚ô®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:</b>", reply_markup=genres_markup, parse_mode="HTML")
    await AddBookState.GENRE.set()

@dp.message_handler(state=AddBookState.GENRE)
async def add_book_genre(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    genre = message.text
    await state.update_data(genre=genre)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    Database('library.db').add_book(data["title"], data["author"], data["description"], data["genre"])

    await message.answer("<b>‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>", parse_mode="HTML")
    await state.finish()
